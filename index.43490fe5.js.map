{"mappings":"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","sources":["src/index.js","src/js/api.js","src/js/markup.js"],"sourcesContent":["\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\nimport axios from \"axios\";\nimport Notiflix from 'notiflix';\nimport { getPhotos} from './js/api.js';\n// import { updatePhotoList } from \"./markup.js\";\n\n\nconst form = document.getElementById('search-form');\nconst gallery = document.querySelector(\".gallery\");\nconst loadMoreButton = document.querySelector(\".load-more\");\nconst lightbox = new SimpleLightbox('.gallery a', {\n    animationSlide: false,\n});\n\nlet page = 1;\n\nform.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    page = 1; \n    const form = e.currentTarget;\n    const inputValue = form.elements.searchQuery.value;\n    await searchImages(inputValue, page);\n});\n\nloadMoreButton.addEventListener(\"click\", async () => {\n    page += 1;\n    const inputValue = form.elements.searchQuery.value;\n    await searchImages(inputValue, page);\n});\n\nlet hasValidImagesOnPage = false;\n\nasync function searchImages(query, page = 1) {\n    try {\n       \n        if (page === 1) {\n            gallery.innerHTML = \"\";\n            hasValidImagesOnPage = false;\n        }\n\n        const response = await getPhotos(query, page);\n\n        if (response.length === 0 && !hasValidImagesOnPage) {\n            Notiflix.Report.failure('Sorry!', 'There are no images matching your search query.', 'Please try again.');\n            return;\n        }\n\n        const keyword = query.toLowerCase();\n\n        response.forEach((image) => {\n            const tags = image.tags.toLowerCase();\n            const tagWords = tags.split(',');\n\n            const hasExactKeyword = tagWords.some((tagWord) => tagWord.trim() === keyword);\n\n            if (hasExactKeyword) {\n                hasValidImagesOnPage = true;\n\n                const card = document.createElement(\"div\");\n                card.classList.add(\"photo-card\");\n                card.innerHTML = `\n                    <a href=\"${image.largeImageURL}\" title=\"${image.tags}\">\n                        <img src=\"${image.webformatURL}\" alt=\"${image.tags}\" loading=\"lazy\">\n                    </a>\n                    <div class=\"info\">\n                        <p class=\"info-item\"><b>Likes:</b> ${image.likes}</p>\n                        <p class=\"info-item\"><b>Views:</b> ${image.views}</p>\n                        <p class=\"info-item\"><b>Comments:</b> ${image.comments}</p>\n                        <p class=\"info-item\"><b>Downloads:</b> ${image.downloads}</p>\n                    </div>\n                `;\n                gallery.appendChild(card);\n            }\n        });\n\n        lightbox.refresh();\n\n        if (page === 1) {\n            loadMoreButton.style.display = \"flex\";\n        }\n    } catch (error) {\n        console.error(error);\n    }\n}","\nimport { updatePhotoList } from './markup';\n\nconst ENDPOINT = 'https://pixabay.com/api/';\nconst API_KEY = '40064667-dee000e37b39a04836075971b';\n\nexport const getPhotos = async  (query, page = 1) => {\n  try {\n    const res = await fetch(`${ENDPOINT}?key=${API_KEY}&q=${query}&image_type=photo&orientation=horizontal&safesearch=true&page=${page}&per_page=20`);\n    const response = await res.json();\n\n    if (response.hits && response.hits.length > 0) {\n      const tags = response.hits.map(hit => hit.tags); \n\n     \n     \n\n      return response.hits;\n    } else {\n      updatePhotoList('<p>No results found.</p>');\n    }\n  } catch (err) {\n    updatePhotoList(`<p>${err}</p>`);\n    console.error(err);\n  }\n};\n\nexport default { getPhotos };","export function updatePhotoList(markup) {\n  document.getElementById('gallery').innerHTML = markup;\n}\n\n\n"],"names":["$bpxeT","parcelRequire","$1457a8b41868a85b$export$d2d2643bfe39d432","markup","document","getElementById","innerHTML","$8197bff4c39d585a$var$ENDPOINT","$8197bff4c39d585a$var$API_KEY","$8197bff4c39d585a$export$6b037c6982b42afc","$parcel$interopDefault","$2TvXO","mark","_callee","query","page","res","response","_args","arguments","length","fetch","concat","_ctx","sent","json","hits","map","hit","tags","t0","console","error","$b8f9b7833fa37166$var$form","$b8f9b7833fa37166$var$gallery","querySelector","$b8f9b7833fa37166$var$loadMoreButton","$b8f9b7833fa37166$var$lightbox","$5IjG7","animationSlide","$b8f9b7833fa37166$var$page","addEventListener","e","form1","inputValue","preventDefault","currentTarget","elements","searchQuery","value","$b8f9b7833fa37166$var$searchImages","$b8f9b7833fa37166$var$hasValidImagesOnPage","$b8f9b7833fa37166$var$_searchImages","apply","this","page1","keyword","$6JpON","Report","failure","toLowerCase","forEach","image","split","some","tagWord","trim","card","createElement","classList","add","largeImageURL","webformatURL","likes","views","comments","downloads","appendChild","refresh","style","display"],"version":3,"file":"index.43490fe5.js.map"}